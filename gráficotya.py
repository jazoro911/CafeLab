# -*- coding: utf-8 -*-
"""GráficoTyA.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1dBKYwHmd7xEnzWoCsO0piUwHT14ZRs9K
"""

#importing pandas profiling library
!pip install ydata-profiling

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.colors as mcolors
from ydata_profiling import ProfileReport
import matplotlib.cm as cm
#from google.colab import drive
#drive.mount('/content/drive')

"""##Descargamos las Bases de Datos

Quitamos Método de Hidratación de Mixteca Oaxaqueña, para después evaluarla individualmente.

También descartamos Chiapas Molienda Grande, debido a que se observen mejor las gráficas.
"""

# Absorción
file_suffix_A=['AChMN','AGoMG','AMiMG','AOxMM','AIlly']

for file_name in file_suffix_A:

  file_path=f'/content/drive/MyDrive/CafeLab/Data /{file_name}.txt'
  file=pd.read_csv(file_path,engine='python',sep='\t',skiprows=8)
  file.iloc[:,1]=pd.to_numeric(file['A'],errors='coerce')
  file=pd.DataFrame(file)

  globals()[file_name] = file
  print(file_name+'     CARGADO')


  for porce in {'05','20','50'}:
    try:
      file_path=f'/content/drive/MyDrive/CafeLab/Data /{file_name}{porce}.txt'
      file=pd.read_csv(file_path,engine='python',sep='\t',skiprows=8)
      file.iloc[:,1]=pd.to_numeric(file['A'],errors='coerce')
      file=pd.DataFrame(file)

      globals()[file_name+porce] = file
      print(file_name+porce+'     CARGADO')

    except FileNotFoundError:
      print(f"No se encontró el archivo {file_name+porce}.txt")

# Transmitancia
file_suffix_T= ['TChMN','TGoMG','TMiMG','TOxMM','TIlly']

for file_name in file_suffix_T:

  file_path=f'/content/drive/MyDrive/CafeLab/Data /{file_name}.txt'
  file=pd.read_csv(file_path,engine='python',sep='\t',skiprows=8)
  file.iloc[:,1]=pd.to_numeric(file['%T'],errors='coerce')
  file=pd.DataFrame(file)

  globals()[file_name] = file
  print(file_name+'     CARGADO')


  for porce in {'05','20','50'}:
    try:
      file_path=f'/content/drive/MyDrive/CafeLab/Data /{file_name}{porce}.txt'
      file=pd.read_csv(file_path,engine='python',sep='\t',skiprows=8)
      file.iloc[:,1]=pd.to_numeric(file['%T'],errors='coerce')
      file=pd.DataFrame(file)

      globals()[file_name+porce] = file
      print(file_name+porce+'     CARGADO')

    except FileNotFoundError:
      print(f"No se encontró el archivo {file_name+porce}.txt")

"""##Gráficas

### Gráfica de Absorción y Transmitancia de:
- ILLY  MM
- CHIAPAS MN
- MIXTECA OAXAQUEÑA MG
- OAXACA MM
- GUERRERO MG
"""

# Asegúrate de que file_suffix_A y file_suffix_T sean listas
file_suffix_A = list(file_suffix_A)
file_suffix_T = list(file_suffix_T)

fig = plt.figure(figsize=(20,20))
ax1 = fig.add_subplot(2, 1, 1)
ax2 = fig.add_subplot(2, 1, 2)

cmap_A = cm.get_cmap('tab10', len(file_suffix_A))  # cambia a 'tab20' si necesitas más colores
cmap_T = cm.get_cmap('Set1', len(file_suffix_T))

# Graficar absorbancia con colores variables (azul -> violeta)
for i, name in enumerate(file_suffix_A):
    df = globals()[name]
    color = cmap_A(i)  # genera un color azul-violeta distinto
    ax1.plot(df['nm'], df['A'], color=color, label=name)

ax1.set_title("Absorbancia", fontsize=20)
ax1.set_xlabel('Longitud de Onda (nm)')
ax1.set_ylabel('Absorbancia')
ax1.legend(loc='upper right')

# Graficar transmitancia con colores variables (rojo -> naranja claro)
for i, name in enumerate(file_suffix_T):
    df = globals()[name]
    color = cmap_T(i)  # genera un color rojo-anaranjado distinto
    ax2.plot(df['nm'], df['%T'], color=color, label=name)

ax2.set_title("Transmitancia", fontsize=20)
ax2.set_xlabel('Longitud de Onda (nm)')
ax2.set_ylabel('Transmitancia (%)')
ax2.legend(loc='upper left')

fig.tight_layout()
plt.show()

"""### Gráficas de Absorción
- ILLY - CHIAPAS
- ILLY - GUERRERO
- ILLY - MIXTECA OAXAQUEÑA
- ILLY - OAXACA
"""

# Asegúrate de que file_suffix_A y file_suffix_T sean listas
file_suffix_A = [x for x in file_suffix_A if x != 'AIlly']

fig, ax = plt.subplots(nrows=2, ncols=2, figsize=(20,20))
ax = ax.flatten()

cmap_A = cm.get_cmap('tab10', len(file_suffix_A))  # cambia a 'tab20' si necesitas más colores

# Graficar absorbancia con colores variables (azul -> violeta)
for i, name in enumerate(file_suffix_A):

    df = globals()[name]
    Illy = globals()['AIlly']
    color = cmap_A(i)  # genera un color azul-violeta distinto
    ax[i].plot(df['nm'], df['A'], color=color, label=name)
    ax[i].plot(Illy['nm'], Illy['A'], color='black', label='Illy')
    ax[i].set_title(f'AIlly vs {name}', fontsize=20)
    ax[i].set_xlabel('Longitud de Onda (nm)')
    ax[i].set_ylabel('Absorbancia')
    ax[i].legend(loc='upper right')

fig.tight_layout()
plt.show()

"""### Gráficas de Transmitancia
- ILLY - CHIAPAS
- ILLY - GUERRERO
- ILLY - MIXTECA OAXAQUEÑA
- ILLY - OAXACA
"""

# Asegúrate de que file_suffix_A y file_suffix_T sean listas
file_suffix_A = [x for x in file_suffix_A if x != 'AIlly']
file_suffix_T = [x for x in file_suffix_T if x != 'TIlly']

fig, ax = plt.subplots(nrows=2, ncols=2, figsize=(20,20))
ax = ax.flatten()

cmap_T = cm.get_cmap('Set1', len(file_suffix_T))

# Graficar absorbancia con colores variables (azul -> violeta)
for i, name in enumerate(file_suffix_T):

    df = globals()[name]
    Illy = globals()['TIlly']
    color = cmap_T(i)  # genera un color azul-violeta distinto
    ax[i].plot(df['nm'], df['%T'], color=color, label=name)
    ax[i].plot(Illy['nm'], Illy['%T'], color='black', label='Illy')
    ax[i].set_title(f'TIlly vs {name}', fontsize=20)
    ax[i].set_xlabel('Longitud de Onda (nm)')
    ax[i].set_ylabel('Transmitancia')
    ax[i].legend(loc='upper left')


fig.tight_layout()
plt.show()

"""### Gráficas de Absorción
Diferentes diluciones ( 05%, 20% y 50% ) con respecto de 15g de café.
"""

fig, ax = plt.subplots(nrows=2, ncols=2, figsize=(20,20))
ax = ax.flatten()

cmap_A = cm.get_cmap('tab20', len(file_suffix_A) * 3)  # 3 curvas por archivo

# Graficar absorbancia con colores variables (azul -> violeta)
for i, name in enumerate(file_suffix_A):
  Illy = globals()['AIlly']
  ax[i].plot(Illy['nm'], Illy['A'], color='black', label='Illy')

  for k, j in enumerate(['','05', '20', '50']):
      df = globals()[f'{name}{j}']
      color = cmap_A(i * 3 + k)  # cambia de color en cada combinación name+concentración

      #ax[i].plot(df['nm'], df['A'], color=color, label=f'{name}{j}')
      ax[i].plot(df['nm'], df['A'], color=color, label=f'{name}{j}')
      ax[i].set_title(f'AIlly vs {name}', fontsize=20)
      ax[i].set_xlabel('Longitud de Onda (nm)')
      ax[i].set_ylabel('Absorbancia')
      ax[i].legend(loc='upper right')

"""### Gráficas de Transmitancia
Diferentes diluciones ( 05%, 20% y 50% ) con respecto de 15g de café.
"""

fig, ax = plt.subplots(nrows=2, ncols=2, figsize=(20,20))
ax = ax.flatten()

cmap_T = cm.get_cmap('tab20', len(file_suffix_T) * 3)  # 3 curvas por archivo

# Graficar absorbancia con colores variables (azul -> violeta)
for i, name in enumerate(file_suffix_T):
  Illy = globals()['TIlly']
  ax[i].plot(Illy['nm'], Illy['%T'], color='black', label='Illy')

  for k, j in enumerate(['','05', '20', '50']):
      df = globals()[f'{name}{j}']
      color = cmap_T(i * 3 + k)  # cambia de color en cada combinación name+concentración

      ax[i].plot(df['nm'], df['%T'], color=color, label=f'{name}{j}')
      ax[i].set_title(f'TIlly vs {name}', fontsize=20)
      ax[i].set_xlabel('Longitud de Onda (nm)')
      ax[i].set_ylabel('Transmitancia')
      ax[i].legend(loc='upper left')

